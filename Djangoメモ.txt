■　管理サイトの設定

from django.contrib import admin
from .models import Memo

class MemoAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'created_datetime', 'updated_datetime')
    list_display_links = ('id', 'title')

admin.site.register(Memo, MemoAdmin)



■　クラスのview設定

from django.shortcuts import render
from .models import Test
from django.views.generic import ListView,DetailView,CreateView,DeleteView,UpdateView
from django.urls import reverse_lazy

class Create(CreateView):
    template_name="create.html"
    model=Test
    fields=["品番","在庫","カテゴリ","メモ"]
    success_url=reverse_lazy("list")


■　html変数の改行タグ

<div>
  {{ memo.text | linebreaks | urlize }}
</div>

linebreaks:テキストの改行を反映して表示してくれるタグです。

urlize:URLとEmailアドレスをクリック可能な状態で表示します。



■　フォーム（テンプレート利用）

### forms.py ###

from django.forms import ModelForm
from .models import Memo

class Memoform(ModelForm):
    class Meta:
        model=Memo
        fields=["タイトル","メモ"]


### views.py ###

from django.shortcuts import render,redirect
from .models import Memo
from .forms import Memoform

def create3(request):
    if request.method=="POST":
        form=Memoform(request.POST)
        if form.is_valid():
            form.save()
            return redirect("index3")
    else:
        form=Memoform()
        return render(request,"create3.html",{"form":form})



def delete3(request,pk):
    item=Memo.objects.filter(pk=pk)
    item.delete()
    return redirect("index3")



def update3(request,pk):
    memo=Memo.objects.get(pk=pk)
    if request.method=="POST":
        form=Memoform(request.POST,instance=memo)
        if form.is_valid():
            form.save()
            return redirect("index3")
    else:
        form=Memoform(instance=memo)
        return render(request,"update3.html",{"form":form,"memo":memo})


## update3.html ##

{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="{% static 'main.css' %}">
    </head>
    <body>
        <div><a href="{% url 'index3' %}">一覧へ戻る</a></div>

    <form action="{% url 'update3' memo.pk %}" method="post">{% csrf_token %}
        {{form.as_p}}
        <button type="submit" class="btn">保存</button>
    </form>

    </body>
</html>


------ {{form.as_p}} を分解 -----------

<form action="{% url 'app:edit_memo' memo.id %}" method="POST">{% csrf_token %}
  <table>
    <tr>
      <th>タイトル</th>
      <td>{{ form.title }}</td>
    </tr>
    <tr>
      <th>テキスト</th>
      <td>{{ form.text }}</td>
    </tr>
  </table>
  <button class="btn" type="submit">保存</button>
</form>



■　ページネーション

○○ ファンクション　○○

# views.py

from django.shortcuts import render
from .models import Test
from django.core.paginator import Paginator


def index(request,num=1):
    item=Test.objects.all()
    make_page=Paginator(item,4)
    data=make_page.get_page(num)
    return render(request,"index.html",{"data":data})


# index.html

<!DOCTYPE html>
<html>
    <head>

    </head>
    <body>
        <h1>生徒一覧</h1>

        <table border="1" style="border-collapse: collapse"><tr><th>id</th><th>名前</th><th>年齢</th><th>登録日</th></tr>
        {% for item in data %}
        <tr><td>{{item.id}}</td><td>{{item.名前}}</td><td>{{item.年齢}}</td><td>{{item.登録日}}</td></tr>
        {% endfor %}
        </table>

        <br>
        {% if data.has_previous %}
        <a href="{% url 'index' %}"><button>最初へ</button></a>
        <a href="{% url 'index' %}{{data.previous_page_number}}"><button>前へ</button></a>
        {% else %}
        <button>最初へ</button>
        <button>前へ</button>
        {% endif %}

        {{data.number}}/{{data.paginator.num_pages}}
        {{data}}

        {% if data.has_next %}
        <a href="{% url 'index' %}{{data.next_page_number}}"><button>次へ</button></a>
        <a href="{% url 'index' %}{{data.paginator.num_pages}}"><button>最後へ</button></a>
        {% else %}
        <button>次へ</button>
        <button>最後へ</button>
        {% endif %}


    </body>

</html>


# urls.py

from django.urls import path
from .views import index

urlpatterns = [
    path('', index ,name="index"),
    path('<int:num>', index ,name="index"),
]




○○ クラス ○○

# views.py

from django.views.generic import ListView
from .models import Article

class ArticleListView(Listview):
    template_name = 'article_list.html'
    model = Article
    pagenate_by = 5 # モデルの分割数を追加


#html

page_obj変数（ページネーション管理オブジェクト）でページ状態を参照


<!DOCTYPE html>
<html>
<head></head>
<body>
    <ul>
        <!-- object_list は該当ページ内で有効なオブジェクトのみにフィルタされて渡される-->
        {% for article in object_list %} 
            <li>{{ article.title }}</li>
        {% endfor %}
    </ul>

    <!-- ページネーション用のUI -->
    <div class="pagination">
        <span class="step-links">
            {% if page_obj.has_previous %}
                <!-- 現在よりも前のページが存在する場合 -->
                <a href="?page=1">&laquo; 先頭</a>
                <a href="?page={{ page_obj.previous_page_number }}">前へ</a>
            {% endif %}

            <span class="current">
                <!-- 現在のページ番号と、全ページ数を表示 -->
                Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
            </span>

            {% if page_obj.has_next %}
                <!-- 現在よりも後のページが存在する場合 -->
                <a href="?page={{ page_obj.next_page_number }}">次へ</a>
                <a href="?page={{ page_obj.paginator.num_pages }}">最後 &raquo;</a>
            {% endif %}
        </span>
    </div>
</body>
</html>





■　リレーション

# models.py

from django.db import models
from django.db.models.deletion import CASCADE

class Test(models.Model):
    name=models.CharField(verbose_name="名前",max_length=10)
    age=models.IntegerField(verbose_name="年齢")

    def __str__(self):
        return self.name


class Test2(models.Model):
    name2=models.ForeignKey(Test,verbose_name="連携名",max_length=10,on_delete=CASCADE)
    club=models.CharField(verbose_name="クラブ",max_length=10)

    def __str__(self):
        return self.club


# index.html（Test側　主テーブル　親　foreignkeyなし側）

<table border="1">
    {% for item in items %}
    <tr>
        <td>{{item.name}}</td>
        <td>{{item.age}}</td>
        <td>{% for cu in item.test2_set.all %}　　←　インスタンス . 子モデル名（小文字で）_set.all
                {{cu.club}}　　　　　　　　　　　←　取り出し（子側の欲しいフィールド）
            {% endfor %}
        </td>
    </tr>
    {% endfor %}
</table>

※classは頭文字が大文字だが、指定するときは小文字で指定！



# index2.html（Test2側　従テーブル　子　ForeignKey記載側）

table border="1">
    {% for item in items %}
    <tr>
        <td>{{item.club}}</td>
        <td>{{item.name2.name}}　←　インスタンス . ForeignKeyを設定したフィールド名 . 欲しい（親テーブルの）フィールド
        </td>
    </tr>
    {% endfor %}
</table>


■　1ページに複数フォーム（モデル更新と一覧表示＜ページネーション＞）

# models.py

from django.db import models
from django.db.models.deletion import CASCADE

class Omote(models.Model):
    name=models.CharField(max_length=10,verbose_name="名前")
    age=models.IntegerField(verbose_name="年齢")

    def __str__(self):
        return self.name


class Ura(models.Model):
    name2=models.ForeignKey(Omote,on_delete=CASCADE,verbose_name="連携名")
    club=models.CharField(max_length=10,verbose_name="クラブ")

    def __str__(self):
        return self.club

# forms.py

from django.db.models import fields
from django.forms import ModelForm
from .models import Omote,Ura

class Omote_form(ModelForm):
    class Meta:
        model=Omote 　　#　←　modelが正解。Modelはダメ。大文字と小文字に注意！
        fields=["name","age"]


class Ura_form(ModelForm):
    class Meta:
        model=Ura
        fields=["name2","club"]


# views.py

from django.shortcuts import redirect, render
from .models import Omote,Ura
from django.core.paginator import Paginator
from .forms import Omote_form,Ura_form

def omote(request,num=1):
    
    items=Omote.objects.all()
    pagen=Paginator(items,4)
    data=pagen.get_page(num)
    form1=Omote_form()
    form2=Ura_form()

    params={
        "data":data,
        "form1":Omote_form(),
        "form2":Ura_form(),
    }

    return render(request,"omote.html",params)


def omote1(request):
    form1=Omote_form(request.POST)
    form1.save()
    return redirect("omote")


def omote2(request):
    form2=Ura_form(request.POST)
    form2.save()
    return redirect("omote")


def ura(request):
    items=Ura.objects.all()
    return render(request,"ura.html",{"data":items})


# urls.py

from django.urls import path
from .views import omote, omote1,omote2,ura

urlpatterns = [
    path('', omote , name="omote"),
    path('<int:num>/', omote , name="omote"),
    path('omote1/',omote1 , name="omote1"),
    path('omote2/',omote2 , name="omote2"),
    path('ura/', ura , name="ura"),
]


#omote.html

<p><a href="{% url 'ura' %}">クラブ一覧</a></p>

<form action="{% url 'omote1' %}" method="post">{% csrf_token %}
    {{form1.as_p}}
    <button type="submit">送信</button>
</form>
<hr>

<form action="{% url 'omote2' %}" method="post">{% csrf_token %}
    {{form2.as_p}}
    <button type="submit">送信</button>
</form>
<hr><br>

<table border="1" style="border-collapse: collapse">
    <tr>
        <th>名前</th>
        <th>年齢</th>
        <th>クラブ</th>
    </tr>
    {% for item in data %}
    <tr>
        <td>{{item.name}}</td>
        <td>{{item.age}}</td>
        <td>
            {% for i in item.ura_set.all %}
            {{i.club}}
            {% endfor %}
        </td>
    </tr>
    {% endfor %}
</table>

<!-- ページネーション-->
<br>
{% if data.has_previous %}
<a href="{% url 'omote' %}"><button>最初へ</button></a>
<a href="{% url 'omote' %}{{data.previous_page_number}}"><button>前へ</button></a>
{% else %}
<button>最初へ</button>
<button>前へ</button>
{% endif %}

ページ：{{data.number}}/{{data.paginator.num_pages}}

{% if data.has_next %}
<a href="{% url 'omote' %}{{data.next_page_number}}"><button>次へ</button></a>
<a href="{% url 'omote' %}{{data.paginator.num_pages}}"><button>最後へ</button></a>
{% else %}
<button>次へ</button>
<button>最後へ</button>
{% endif %}


# ura.html

<p><a href="{% url 'omote' %}">なまえ一覧</a></p>

<table border="1" style="border-collapse: collapse">
    <tr>
        <th>クラブ</th>
        <th>名前</th>
        <th>年齢</th>
    </tr>
    {% for item in data %}
    <tr>
        <td>{{item.club}}</td>
        <td>{{item.name2.name}}</td>
        <td>{{item.name2.age}}</td>
    </tr>
    {% endfor %}
</table>


■　通常フォームとモデルフォームの合体

# views.py

def omote_post(request,num=1):
    form=Omoteform(request.POST)
    form.save()
    
    items=Omote.objects.all()
    page=Paginator(items,4)
    params={
        "data":page.get_page(num),
        "form1":Omoteform(),
        "form2":Uraform(),
        "name":request.POST["name"],
        "age":request.POST["age"],
    }
    return render(request,"omote.html",params)

  
■　HTMLのフォームを使ったmodelへの直接保存（HTML側でバリデーション）

＜入力直後のバリデーションを重視する場合＞
※Modelform や forms.Form　で作成するより、HTML側でのバリデーションが簡単かも

# views.py（HTML側で入力直後のバリデーションを行う場合）

def omote_test(request):
    test1=request.POST["test_name"]　
    test2=request.POST["test_age"]　・・・HTML側でname属性を指定をしておく
    Omote.objects.create(name=test1,age=test2) 　# モデル名.objects.create()で直接書き込む。※forms.py は不要
    return redirect("omote")


# html

<!--  Modelform や forms.Form の場合-->
<form action="{% url 'name' %}" method="post">{% csrf_token %}
    {{form1.as_p}} 　※分解しても{{form1.name}}などで、ここではバリデーション設定ができない。
    <button type="submit">追加</button>
</form>
<br><hr>

<!--  HTML側でバリデーション   -->
<form action="{% url 'name' %}" method="post">{% csrf_token %}
    <label for="test1">名前：</label>
    <input type="text" id="test1" name="test_name" required>  ※必須にする場合

    <label for="test2">年齢：</label>
    <input type="number" id="test2" name="test_age" min=0 max=60 required>　※必須、0以上60以下

    <button type="submit">追加</button>
</form>

【結果】
内容による。
integer指定はforms.pyでの指定が面倒だが、
required程度ならform側で指定した方がforms.Formで指定できるので楽かも。HTML側のコードも楽。

※どのフォームを使うかで、HTMLかforms.pyで validするかを考えるべき。
※models.pyでのvalid指定は、一度POSTされてからになるので（.is_valid()）結果が404で返ってきてしまう。



■ booststrapと通常CSS

<テーブル>

#omote.html

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <style>
        .test1{
            background-color: lightblue;
        }
    </style>
</head>


<div class="container">
    <h2>名前基準</h2>
    <table class="table table-striped table-bordered" style="width: 30%">
        <thead class="test1">
        <tr>
            <th style="width: auto">名前</th>
            <th style="width: auto">年齢</th>
            <th style="width: auto">クラブ</th>
            <th style="width: auto"></th>
        </tr>
        </thead>
        <tbody>
        {% for item in data %}
        <tr>
            <td>{{item.name}}</td>
            <td>{{item.age}}</td>
            <td>
                {% for i in item.ura_set.all %}
                {{i.club}}
                {% endfor %}
            </td>
            <td align="center"><a href="{% url 'delete' item.pk %}">削除</a></td>
        </tr>
        {% endfor %}
        </tbody>
    </table>

    ・・・　ページネーション系のコード

</div>


＜ページネーション＞

<nav aria-label="Page navigation example">
    <ul class="pagination">
        
    {% if data.has_previous %}
        <li class="page-item"><a class="page-link" href="{% url 'omote' %}">最初へ</a></li>
        <li class="page-item"><a class="page-link" href="{% url 'omote' %}{{data.previous_page_number}}">前へ</a></li>
    {% else %}
        <li class="page-item"><a class="page-link" pointer-events: none;>最初へ</a></li>
        <li class="page-item"><a class="page-link" pointer-events: none;>前へ</a></li>
    {% endif %}

    <li class="page-item"><a class="page-link" pointer-events: none;>{{data.number}}/{{data.paginator.num_pages}}</a></li>
    
    {% if data.has_next %}
        <li class="page-item"><a class="page-link" href="{% url 'omote' %}{{data.next_page_number}}">次へ</a></li>
        <li class="page-item"><a class="page-link" href="{% url 'omote' %}{{data.paginator.num_pages}}">最後へ</a></li>
    {% else %}
        <li class="page-item"><a class="page-link" pointer-events: none;>次へ</a></li>
        <li class="page-item"><a class="page-link" pointer-events: none;>最後へ</a></li>
    {% endif %}

    </ul>
</nav>